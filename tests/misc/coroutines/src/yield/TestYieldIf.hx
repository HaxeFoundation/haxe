package yield;

import yield.Yield;

@:build(yield.YieldMacro.build())
class TestYieldIf extends BaseCase {

	public function testIf_withoutElse() {
		assert([10, 20, 30, 40], ifWithoutElse(true));
		Assert.equals('1234567', dummy);
		assert([10, 30], ifWithoutElse(false));
		Assert.equals('12567', dummy);
	}

	@:yield function ifWithoutElse(condition:Bool) {
		dummy += '1';
		@:yield return 10;
		dummy += '2';
		if(condition) {
			dummy += '3';
			@:yield return 20;
			dummy += '4';
		}
		dummy += '5';
		@:yield return 30;
		dummy += '6';
		if(condition) @:yield return 40;
		dummy += '7';
	}


	public function testIfElse() {
		assert([10], ifElse(true));
		Assert.equals('123678', dummy);
		assert([20, 30], ifElse(false));
		Assert.equals('14568', dummy);
	}

	@:yield function ifElse(condition:Bool) {
		dummy += '1';
		if(condition) {
			dummy += '2';
			@:yield return 10;
			dummy += '3';
		} else {
			dummy += '4';
			@:yield return 20;
			dummy += '5';
		}
		dummy += '6';
		if(condition) {
			dummy += '7';
		} else @:yield return 30;
		dummy += '8';
	}

	#if broken
	public function testIfElse_withoutYield_runInSingleState() {
		assert([10], ifElseNoYield(true));
		assert([10], ifElseNoYield(false));
	}

	@:yield function ifElseNoYield(condition:Bool) {
		var state = __ctx__.state; //__ctx__ is generated by build macros
		if(condition) {
			Assert.equals(state, __ctx__.state);
		} else {
			Assert.equals(state, __ctx__.state);
		}
		Assert.equals(state, __ctx__.state);

		@:yield return 10;
	}
	#end


	public function testIfElse_nestedIfs() {
		assert([10], nestedIfs(true));
		Assert.equals('123456', dummy);
		assert([], nestedIfs(false));
		Assert.equals('16', dummy);
	}

	@:yield function nestedIfs(condition:Bool) {
		dummy += '1';
		if(condition) {
			dummy += '2';
			if(condition) {
				dummy += '3';
				@:yield return 10;
				dummy += '4';
			}
			dummy += '5';
		}
		dummy += '6';
	}
}
package yield;

import utest.Assert;
import yield.Yield;

@:build(yield.YieldMacro.build())
class TestYieldTryCatch extends BaseCase {

	public function testTryCatch_noCatch() {
		assert([10], tryCatch_noCatch());
		Assert.equals('1235', dummy);
	}

	@:yield function tryCatch_noCatch() {
		dummy += '1';
		try {
			dummy += '2';
			@:yield return 10;
			dummy += '3';
		}
		catch(e:Dynamic) {
			dummy += '4';
		}
		dummy += '5';
	}


	public function testTryCatch_oneCatch() {
		assert([10], tryCatch_oneCatch());
		Assert.equals('12456', dummy);
	}

	@:yield function tryCatch_oneCatch() {
		dummy += '1';
		try {
			dummy += '2';
			throw 'Error!';
			dummy += '3';
		}
		catch(e:Dynamic) {
			dummy += '4';
			@:yield return 10;
			dummy += '5';
		}
		dummy += '6';
	}

	public function testTryCatch_multiCatch() {
		assert([10], tryCatch_multiCatch('Error'));
		Assert.equals('12458', dummy);
		assert([20], tryCatch_multiCatch(123));
		Assert.equals('12678', dummy);
	}

	@:yield function tryCatch_multiCatch(throwValue:Dynamic) {
		dummy += '1';
		try {
			dummy += '2';
			throw throwValue;
			dummy += '3';
		}
		catch(e:String) {
			dummy += '4';
			@:yield return 10;
			dummy += '5';
		}
		catch(e:Dynamic) {
			dummy += '6';
			@:yield return 20;
			dummy += '7';
		}
		dummy += '8';
	}

	public function testTryCatch_nested() {
		assert([10], tryCatch_nested(1));
		Assert.equals('124569', dummy);
		assert([20], tryCatch_nested('Error!'));
		Assert.equals('12789', dummy);
	}

	@:yield function tryCatch_nested(throwValue:Dynamic) {
		dummy += '1';
		try {
			try {
				dummy += '2';
				throw throwValue;
				dummy += '3';
			}
			catch(e:Int) {
				dummy += '4';
				@:yield return 10;
				dummy += '5';
			}
			dummy += '6';
		}
		catch(e:Dynamic) {
			dummy += '7';
			@:yield return 20;
			dummy += '8';
		}
		dummy += '9';
	}

	#if broken

	public function testTryCatch_withoutYield_runInSingleState() {
		assert([10], tryCatchNoYield(true));
	}

	@:yield function tryCatchNoYield(condition:Bool) {
		var state = __ctx__.state; //__ctx__ is generated by build macros
		try {
			Assert.equals(state, __ctx__.state);
		}
		catch(e:Dynamic){
			Assert.equals(state, __ctx__.state);
		}
		Assert.equals(state, __ctx__.state);

		@:yield return 10;
	}

	#end

	public function testTryCatch_exceptionNotCaught_thrownOutOfYieldContext() {
		try {
			assert([], tryCatchNotCaught());
			Assert.fail();
		}
		catch(e:String) {
			Assert.equals('Error!', e);
			Assert.equals('12', dummy);
		}
	}

	@:yield function tryCatchNotCaught() {
		dummy += '1';
		try {
			dummy += '2';
			throw "Error!";
			dummy += '3';
			@:yield return 10;
			dummy += '4';
		}
		catch(e:Int){
			dummy += '5';
		}
		dummy += '6';
	}

	public function testTryCatch_captureVariable() {
		assert([10], tryCatch_captureVariable());
		Assert.equals('12456', dummy);
	}

	@:yield function tryCatch_captureVariable() {
		dummy += '1';
		try {
			dummy += '2';
			throw 10;
			dummy += '3';
		}
		catch(e:Int) {
			dummy += '4';
			@:yield return e;
			dummy += 5;
		}
		dummy += '6';
	}
}
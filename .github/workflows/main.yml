# DO NOT EDIT. Generated from /extra/github-actions
name: CI
on: [push, pull_request]

jobs:

  linux-build:
    runs-on: ubuntu-latest
    env:
      PLATFORM: linux64
      OPAMYES: 1
    steps:
      - uses: actions/checkout@master
        with:
          submodules: recursive

      - name: Install dependencies
        run: |
          set -ex
          sudo add-apt-repository ppa:avsm/ppa -y # provides OPAM 2
          sudo add-apt-repository ppa:haxe/ocaml -y # provides newer version of mbedtls
          sudo apt-get update -qqy
          sudo apt-get install -qqy ocaml-nox camlp5 opam libpcre3-dev zlib1g-dev libgtk2.0-dev libmbedtls-dev ninja-build neko neko-dev

      - name: Install OCaml libraries
        run: |
          set -ex
          opam init # --disable-sandboxing
          opam update
          opam pin add haxe . --no-action
          opam install haxe --deps-only
          opam list
          ocamlopt -v

      - name: Build Haxe
        run: |
          set -ex
          eval $(opam env)
          opam config exec -- make -s -j`nproc` STATICLINK=1 haxe
          opam config exec -- make -s haxelib
          make -s package_unix
          ls -l out
          ldd -v ./haxe
          ldd -v ./haxelib

      - name: Build xmldoc
        run: |
          set -ex
          make -s xmldoc
          cat >extra/doc/info.json <<EOL
            {
              "commit": "$GITHUB_SHA",
              "branch": "$GITHUB_REF"
            }
          EOL

      - name: Upload artifact
        uses: actions/upload-artifact@v1.0.0
        with:
          name: linuxBinaries
          path: out

  linux-test:
    needs: linux-build
    runs-on: ubuntu-latest
    env:
      PLATFORM: linux64
      TEST: ${{matrix.target}}
      HXCPP_COMPILE_CACHE: ~/hxcache
    strategy:
      fail-fast: false
      matrix:
        target: [macro, js, hl, cpp, 'java,jvm', cs, php, python, lua, flash9, neko]
        include:
          - target: js
            # SAUCE: 1
            # SAUCE_TUNNEL_ID: 'linux-test'
            # SAUCE_BUILD: '${{env.GITHUB_RUN_NUMBER}}' # $(Build.BuildNumber)
          - target: hl
            APT_PACKAGES: cmake ninja-build libturbojpeg-dev
          - target: cpp
            APT_PACKAGES: gcc-multilib g++-multilib
          - target: lua
            APT_PACKAGES: ncurses-dev
          - target: flash9
            APT_PACKAGES: libglib2.0 libfreetype6 xvfb
    steps:
      - uses: actions/checkout@master
        with:
          submodules: recursive
      - uses: actions/download-artifact@v1
        with:
          name: linuxBinaries

      - name: Install Neko using apt-get (Linux)
        if: (startsWith(env.PLATFORM, 'linux'))
        run: |
          set -ex
          sudo add-apt-repository ppa:haxe/snapshots -y
          sudo apt-get update -qqy
          sudo apt-get install -qqy neko

      - name: Print Neko version
        run: neko -version 2>&1


      - name: Setup Haxe
        run: |
          # mkdir ./linuxBinaries
          # curl -sSL https://build.haxe.org/builds/haxe/linux64/haxe_latest.tar.gz -o ./linuxBinaries/haxe_bin.tar.gz

          sudo apt install -qqy libmbedtls-dev

          set -ex
          tar -xf linuxBinaries/*_bin.tar.gz -C linuxBinaries --strip-components=1
          sudo mkdir -p /usr/local/bin/
          sudo mkdir -p /usr/local/share/haxe/
          sudo ln -s `pwd`/linuxBinaries/haxe /usr/local/bin/haxe
          sudo ln -s `pwd`/linuxBinaries/haxelib /usr/local/bin/haxelib
          sudo ln -s `pwd`/linuxBinaries/std /usr/local/share/haxe/std

      - name: Print Haxe version
        run: haxe -version

      - name: Setup haxelib
        run: |
          set -ex
          mkdir ~/haxelib
          haxelib setup ~/haxelib

      - name: Install apt packages
        if: matrix.APT_PACKAGES
        run: |
          set -ex
          sudo apt update -qqy
          sudo apt install -qqy ${{matrix.APT_PACKAGES}}

      - name: Flash setup
        if: matrix.target == 'flash9'
        run: export DISPLAY=:99.0

      - name: Test
        if: success() && !(matrix.SAUCE && matrix.SAUCE_ACCESS_KEY)
        run: haxe RunCi.hxml
        working-directory: ${{github.workspace}}/tests

      - name: Test (with SauceLabs)
        if: matrix.target == 'js' && success() && matrix.SAUCE && matrix.SAUCE_ACCESS_KEY
        run: haxe RunCi.hxml
        working-directory: ${{github.workspace}}/tests
        env:
          SAUCE_ACCESS_KEY: matrix.SAUCE_ACCESS_KEY
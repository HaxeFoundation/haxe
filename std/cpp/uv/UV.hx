/*
 * Copyright (C)2005-2019 Haxe Foundation
 *
 * Permission is hereby granted, free of charge, to any person obtaining a
 * copy of this software and associated documentation files (the "Software"),
 * to deal in the Software without restriction, including without limitation
 * the rights to use, copy, modify, merge, publish, distribute, sublicense,
 * and/or sell copies of the Software, and to permit persons to whom the
 * Software is furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in
 * all copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
 * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
 * DEALINGS IN THE SOFTWARE.
 */

// This file is automatically generated by a tool in HXCPP repo.
// see <hxcpp_repo>/tools/uvgenerator

// Contents of <hxcpp_repo>/tools/uvgenerator/UV.hx.header :

package cpp.uv;

@:coreType
@:native("uv_loop_option")
extern enum abstract UvLoopOption from Int {
	@:native("UV_LOOP_BLOCK_SIGNAL") var UV_LOOP_BLOCK_SIGNAL;
	@:native("UV_METRICS_IDLE_TIME") var UV_METRICS_IDLE_TIME;
}

extern enum abstract NativeSigNum(Int) from Int to Int {
	@:native("SIGABRT") var SIGABRT;
	@:native("SIGFPE") var SIGFPE;
	@:native("SIGHUP") var SIGHUP;
	@:native("SIGILL") var SIGILL;
	@:native("SIGINT") var SIGINT;
	@:native("SIGKILL") var SIGKILL;
	@:native("SIGSEGV") var SIGSEGV;
	@:native("SIGTERM") var SIGTERM;
	@:native("SIGWINCH") var SIGWINCH;
}

extern enum abstract AfAddressFamily(Int) from Int to Int {
	@:native("AF_UNSPEC") var AF_UNSPEC;
	@:native("AF_INET") var AF_INET;
	@:native("AF_INET6") var AF_INET6;
}

extern enum abstract PfAddressFamily(Int) from Int to Int {
	@:native("PF_UNSPEC") var PF_UNSPEC;
	@:native("PF_INET") var PF_INET;
	@:native("PF_INET6") var PF_INET6;
}

typedef UvPidT = Int;
typedef UvUidT = Int;
typedef UvGidT = Int;

@:native("uv_buf_t")
@:structAccess extern class UvBufT {
	var base:RawPointer<Char>;
	var len:SizeT;
	@:native("new uv_buf_t") public static function create():RawPointer<UvBufT>;
}

@:native("uv_os_sock_t")
@:scalar @:coreType @:notNull
extern abstract UvOsSockT from Int to Int {}

@:coreType
@:native("uv_tcp_flags")
extern enum abstract UvTcpFlags to Int {
	@:native("UV_TCP_IPV6ONLY") var UV_TCP_IPV6ONLY;
}

@:native("sockaddr_storage")
@:structAccess extern class SockaddrStorage {
	var ss_family:AfAddressFamily;
	@:native("new sockaddr_storage") public static function create():RawPointer<SockaddrStorage>;
}

@:native("sockaddr_in6")
@:structAccess extern class SockaddrIn6 {
	var sin6_port:UInt16;
	@:native("new sockaddr_in6") public static function create():RawPointer<SockaddrIn6>;
}

@:native("sockaddr_in")
@:structAccess extern class SockaddrIn {
	var sin_port:UInt16;
	@:native("new sockaddr_in") public static function create():RawPointer<SockaddrIn>;
}

@:native("sockaddr")
@:structAccess extern class Sockaddr {
	@:native("new sockaddr") public static function create():RawPointer<Sockaddr>;
}

abstract UvFile(Int) to Int {
	@:allow(cpp.uv) inline function new(fd:Int)
		this = fd;
}

typedef UvFsCb = Callable<(RawPointer<UvFsT>)->Void>;

extern enum abstract UvFsOpenFlag(Int) to Int {
	@:native("UV_FS_O_APPEND") var UV_FS_O_APPEND;
	@:native("UV_FS_O_CREAT") var UV_FS_O_CREAT;
	@:native("UV_FS_O_DIRECT") var UV_FS_O_DIRECT;
	@:native("UV_FS_O_DIRECTORY") var UV_FS_O_DIRECTORY;
	@:native("UV_FS_O_DSYNC") var UV_FS_O_DSYNC;
	@:native("UV_FS_O_EXCL") var UV_FS_O_EXCL;
	@:native("UV_FS_O_EXLOCK") var UV_FS_O_EXLOCK;
	@:native("UV_FS_O_FILEMAP") var UV_FS_O_FILEMAP;
	@:native("UV_FS_O_NOATIME") var UV_FS_O_NOATIME;
	@:native("UV_FS_O_NOCTTY") var UV_FS_O_NOCTTY;
	@:native("UV_FS_O_NOFOLLOW") var UV_FS_O_NOFOLLOW;
	@:native("UV_FS_O_NONBLOCK") var UV_FS_O_NONBLOCK;
	@:native("UV_FS_O_RANDOM") var UV_FS_O_RANDOM;
	@:native("UV_FS_O_RDONLY") var UV_FS_O_RDONLY;
	@:native("UV_FS_O_RDWR") var UV_FS_O_RDWR;
	@:native("UV_FS_O_SEQUENTIAL") var UV_FS_O_SEQUENTIAL;
	@:native("UV_FS_O_SHORT_LIVED") var UV_FS_O_SHORT_LIVED;
	@:native("UV_FS_O_SYMLINK") var UV_FS_O_SYMLINK;
	@:native("UV_FS_O_SYNC") var UV_FS_O_SYNC;
	@:native("UV_FS_O_TEMPORARY") var UV_FS_O_TEMPORARY;
	@:native("UV_FS_O_TRUNC") var UV_FS_O_TRUNC;
	@:native("UV_FS_O_WRONLY") var UV_FS_O_WRONLY;
}

enum abstract NativeFileAccessMode(Int) to Int {
	@:native("F_OK") var F_OK;
	@:native("X_OK") var X_OK;
	@:native("W_OK") var W_OK;
	@:native("R_OK") var R_OK;
}

extern enum abstract NativeAddrInfoFlag(Int) from Int to Int {
	@:native("AI_PASSIVE") var AI_PASSIVE;
	@:native("AI_CANONNAME") var AI_CANONNAME;
	@:native("AI_NUMERICHOST") var AI_NUMERICHOST;
	@:native("AI_V4MAPPED") var AI_V4MAPPED;
	@:native("AI_ALL") var AI_ALL;
	@:native("AI_ADDRCONFIG") var AI_ADDRCONFIG;
	@:native("AI_NUMERICSERV") var AI_NUMERICSERV;
}

extern enum abstract NativeSocketType(Int) from Int to Int {
	@:native("SOCK_STREAM") var SOCK_STREAM;
	@:native("SOCK_DGRAM") var SOCK_DGRAM;
	@:native("SOCK_RAW") var SOCK_RAW;
}

@:native("addrinfo")
@:structAccess extern class Addrinfo {
	function new():Void;
	@:native("new addrinfo") public static function create():RawPointer<Addrinfo>;
	var ai_flags:Int;
	var ai_family:Int;
	var ai_socktype:Int;
	var ai_protocol:Int;
	var ai_addrlen:Int;
	var ai_addr:RawPointer<Sockaddr>;
	var ai_canonname:RawPointer<Char>;
	var ai_next:RawPointer<Addrinfo>;
}

extern enum abstract NativeNameInfoFlag(Int) from Int to Int {
	@:native("NI_NUMERICHOST") var NI_NUMERICHOST;
	@:native("NI_NUMERICSERV") var NI_NUMERICSERV;
	@:native("NI_NOFQDN") var NI_NOFQDN;
	@:native("NI_NAMEREQD") var NI_NAMEREQD;
	@:native("NI_DGRAM") var NI_DGRAM;
}

/**
	Automatically generated bindings for libuv.

	@see http://docs.libuv.org/en/v1.x/api.html

	Avoid using this module directly.
	BACKWARD COMPATIBILITY OF THIS MODULE IS NOT MAINTAINED.
**/
@:buildXml('<include name="${HXCPP}/src/hx/libs/libuv/Build.xml"/>')
extern class UV {

	extern static public inline function resolve(result:Int):Int {
		if(result < 0)
			throw new UVException(UVError.ofNative(result));
		return result;
	}

	extern static public inline function throwErr(result:Int):Int {
		throw new UVException(UVError.ofNative(result));
	}

	extern static public inline function explain(result:Int):UVError {
		return result < 0 ? UVError.ofNative(result) : UV_NOERR;
	}

	extern static public inline function toChars(array:Array<String>):RawPointer<RawPointer<Char>> {
		var chars:Pointer<CastCharStar> = Stdlib.malloc((array.length + 1) * untyped __cpp__("sizeof(char *)"));
		chars.setAt(array.length, null);
		for(i => item in array)
			chars.setAt(i, item);
		return chars.raw;
	}

	extern static public inline function getName(fn:(buf:RawPointer<Char>, size:RawPointer<SizeT>)->Int):String {
		var size:SizeT = 256;
		var buf:Pointer<Char> = null;
		var eNoBufs = UVError.UV_ENOBUFS.toNative();
		var result = eNoBufs;
		while (result == eNoBufs) {
			if(buf != null)
				Stdlib.free(buf);
			buf = Stdlib.malloc(size);
			result = fn(buf.raw, RawPointer.addressOf(size));
		}
		if(result < 0) {
			if(buf != null)
				Stdlib.free(buf);
			throwErr(result);
		}
		return new String(untyped buf.raw); // TODO: is this a correct way to create String from RawPointer<Char>
	}

	extern static public inline function toBuf(bytes:haxe.io.Bytes, pos:Int, length:Int):RawPointer<UvBufT> {
		if(pos + length > bytes.length)
			throw new UVException(UV_ENOBUFS);
		var buf = UvBufT.create();
		var ptr = Pointer.fromRaw(buf);
		var base = NativeArray.getBase(bytes.getData()).getBase();
		ptr.value.base = Pointer.addressOf(Pointer.fromRaw(base).at(pos)).raw;
		ptr.value.len = length;
		return buf;
	}

// Auto generated content :

	@:native("uv_async_init") static function async_init(loop:RawPointer<UvLoopT>, async:RawPointer<UvAsyncT>, async_cb:UvAsyncCb):Int;
	@:native("uv_async_send") static function async_send(async:RawPointer<UvAsyncT>):Int;
	@:native("uv_check_init") static function check_init(loop:RawPointer<UvLoopT>, check:RawPointer<UvCheckT>):Int;
	@:native("uv_check_start") static function check_start(check:RawPointer<UvCheckT>, cb:UvCheckCb):Int;
	@:native("uv_check_stop") static function check_stop(check:RawPointer<UvCheckT>):Int;
	@:native("uv_getaddrinfo") static function getaddrinfo(loop:RawPointer<UvLoopT>, req:RawPointer<UvGetaddrinfoT>, getaddrinfo_cb:UvGetaddrinfoCb, node:ConstCharStar, service:ConstCharStar, hints:RawConstPointer<Addrinfo>):Int;
	@:native("uv_freeaddrinfo") static function freeaddrinfo(ai:RawPointer<Addrinfo>):Void;
	@:native("uv_getnameinfo") static function getnameinfo(loop:RawPointer<UvLoopT>, req:RawPointer<UvGetnameinfoT>, getnameinfo_cb:UvGetnameinfoCb, addr:RawConstPointer<Sockaddr>, flags:Int):Int;
	@:native("uv_strerror") static function strerror(err:Int):ConstCharStar;
	@:native("uv_strerror_r") static function strerror_r(err:Int, buf:RawPointer<Char>, buflen:SizeT):RawPointer<Char>;
	@:native("uv_err_name") static function err_name(err:Int):ConstCharStar;
	@:native("uv_err_name_r") static function err_name_r(err:Int, buf:RawPointer<Char>, buflen:SizeT):RawPointer<Char>;
	@:native("uv_translate_sys_error") static function translate_sys_error(sys_errno:Int):Int;
	@:native("uv_fs_req_cleanup") static function fs_req_cleanup(req:RawPointer<UvFsT>):Void;
	@:native("uv_fs_close") static function fs_close(loop:RawPointer<UvLoopT>, req:RawPointer<UvFsT>, file:UvFile, cb:UvFsCb):Int;
	@:native("uv_fs_open") static function fs_open(loop:RawPointer<UvLoopT>, req:RawPointer<UvFsT>, path:ConstCharStar, flags:Int, mode:Int, cb:UvFsCb):Int;
	@:native("uv_fs_read") static function fs_read(loop:RawPointer<UvLoopT>, req:RawPointer<UvFsT>, file:UvFile, bufs:RawPointer<UvBufT>, nbufs:UInt32, offset:Int64, cb:UvFsCb):Int;
	@:native("uv_fs_unlink") static function fs_unlink(loop:RawPointer<UvLoopT>, req:RawPointer<UvFsT>, path:ConstCharStar, cb:UvFsCb):Int;
	@:native("uv_fs_write") static function fs_write(loop:RawPointer<UvLoopT>, req:RawPointer<UvFsT>, file:UvFile, bufs:RawPointer<UvBufT>, nbufs:UInt32, offset:Int64, cb:UvFsCb):Int;
	@:native("uv_fs_mkdir") static function fs_mkdir(loop:RawPointer<UvLoopT>, req:RawPointer<UvFsT>, path:ConstCharStar, mode:Int, cb:UvFsCb):Int;
	@:native("uv_fs_mkdtemp") static function fs_mkdtemp(loop:RawPointer<UvLoopT>, req:RawPointer<UvFsT>, tpl:ConstCharStar, cb:UvFsCb):Int;
	@:native("uv_fs_mkstemp") static function fs_mkstemp(loop:RawPointer<UvLoopT>, req:RawPointer<UvFsT>, tpl:ConstCharStar, cb:UvFsCb):Int;
	@:native("uv_fs_rmdir") static function fs_rmdir(loop:RawPointer<UvLoopT>, req:RawPointer<UvFsT>, path:ConstCharStar, cb:UvFsCb):Int;
	@:native("uv_fs_opendir") static function fs_opendir(loop:RawPointer<UvLoopT>, req:RawPointer<UvFsT>, path:ConstCharStar, cb:UvFsCb):Int;
	@:native("uv_fs_closedir") static function fs_closedir(loop:RawPointer<UvLoopT>, req:RawPointer<UvFsT>, dir:RawPointer<UvDirT>, cb:UvFsCb):Int;
	@:native("uv_fs_readdir") static function fs_readdir(loop:RawPointer<UvLoopT>, req:RawPointer<UvFsT>, dir:RawPointer<UvDirT>, cb:UvFsCb):Int;
	@:native("uv_fs_scandir") static function fs_scandir(loop:RawPointer<UvLoopT>, req:RawPointer<UvFsT>, path:ConstCharStar, flags:Int, cb:UvFsCb):Int;
	@:native("uv_fs_scandir_next") static function fs_scandir_next(req:RawPointer<UvFsT>, ent:RawPointer<UvDirentT>):Int;
	@:native("uv_fs_stat") static function fs_stat(loop:RawPointer<UvLoopT>, req:RawPointer<UvFsT>, path:ConstCharStar, cb:UvFsCb):Int;
	@:native("uv_fs_fstat") static function fs_fstat(loop:RawPointer<UvLoopT>, req:RawPointer<UvFsT>, file:UvFile, cb:UvFsCb):Int;
	@:native("uv_fs_lstat") static function fs_lstat(loop:RawPointer<UvLoopT>, req:RawPointer<UvFsT>, path:ConstCharStar, cb:UvFsCb):Int;
	@:native("uv_fs_statfs") static function fs_statfs(loop:RawPointer<UvLoopT>, req:RawPointer<UvFsT>, path:ConstCharStar, cb:UvFsCb):Int;
	@:native("uv_fs_rename") static function fs_rename(loop:RawPointer<UvLoopT>, req:RawPointer<UvFsT>, path:ConstCharStar, new_path:ConstCharStar, cb:UvFsCb):Int;
	@:native("uv_fs_fsync") static function fs_fsync(loop:RawPointer<UvLoopT>, req:RawPointer<UvFsT>, file:UvFile, cb:UvFsCb):Int;
	@:native("uv_fs_fdatasync") static function fs_fdatasync(loop:RawPointer<UvLoopT>, req:RawPointer<UvFsT>, file:UvFile, cb:UvFsCb):Int;
	@:native("uv_fs_ftruncate") static function fs_ftruncate(loop:RawPointer<UvLoopT>, req:RawPointer<UvFsT>, file:UvFile, offset:Int64, cb:UvFsCb):Int;
	@:native("uv_fs_copyfile") static function fs_copyfile(loop:RawPointer<UvLoopT>, req:RawPointer<UvFsT>, path:ConstCharStar, new_path:ConstCharStar, flags:Int, cb:UvFsCb):Int;
	@:native("uv_fs_sendfile") static function fs_sendfile(loop:RawPointer<UvLoopT>, req:RawPointer<UvFsT>, out_fd:UvFile, in_fd:UvFile, in_offset:Int64, length:SizeT, cb:UvFsCb):Int;
	@:native("uv_fs_access") static function fs_access(loop:RawPointer<UvLoopT>, req:RawPointer<UvFsT>, path:ConstCharStar, mode:Int, cb:UvFsCb):Int;
	@:native("uv_fs_chmod") static function fs_chmod(loop:RawPointer<UvLoopT>, req:RawPointer<UvFsT>, path:ConstCharStar, mode:Int, cb:UvFsCb):Int;
	@:native("uv_fs_fchmod") static function fs_fchmod(loop:RawPointer<UvLoopT>, req:RawPointer<UvFsT>, file:UvFile, mode:Int, cb:UvFsCb):Int;
	@:native("uv_fs_utime") static function fs_utime(loop:RawPointer<UvLoopT>, req:RawPointer<UvFsT>, path:ConstCharStar, atime:Float, mtime:Float, cb:UvFsCb):Int;
	@:native("uv_fs_futime") static function fs_futime(loop:RawPointer<UvLoopT>, req:RawPointer<UvFsT>, file:UvFile, atime:Float, mtime:Float, cb:UvFsCb):Int;
	@:native("uv_fs_lutime") static function fs_lutime(loop:RawPointer<UvLoopT>, req:RawPointer<UvFsT>, path:ConstCharStar, atime:Float, mtime:Float, cb:UvFsCb):Int;
	@:native("uv_fs_link") static function fs_link(loop:RawPointer<UvLoopT>, req:RawPointer<UvFsT>, path:ConstCharStar, new_path:ConstCharStar, cb:UvFsCb):Int;
	@:native("uv_fs_symlink") static function fs_symlink(loop:RawPointer<UvLoopT>, req:RawPointer<UvFsT>, path:ConstCharStar, new_path:ConstCharStar, flags:Int, cb:UvFsCb):Int;
	@:native("uv_fs_readlink") static function fs_readlink(loop:RawPointer<UvLoopT>, req:RawPointer<UvFsT>, path:ConstCharStar, cb:UvFsCb):Int;
	@:native("uv_fs_realpath") static function fs_realpath(loop:RawPointer<UvLoopT>, req:RawPointer<UvFsT>, path:ConstCharStar, cb:UvFsCb):Int;
	@:native("uv_fs_chown") static function fs_chown(loop:RawPointer<UvLoopT>, req:RawPointer<UvFsT>, path:ConstCharStar, uid:UvUidT, gid:UvGidT, cb:UvFsCb):Int;
	@:native("uv_fs_fchown") static function fs_fchown(loop:RawPointer<UvLoopT>, req:RawPointer<UvFsT>, file:UvFile, uid:UvUidT, gid:UvGidT, cb:UvFsCb):Int;
	@:native("uv_fs_lchown") static function fs_lchown(loop:RawPointer<UvLoopT>, req:RawPointer<UvFsT>, path:ConstCharStar, uid:UvUidT, gid:UvGidT, cb:UvFsCb):Int;
	@:native("uv_fs_get_type") static function fs_get_type(req:RawConstPointer<UvFsT>):UvFsType;
	@:native("uv_fs_get_result") static function fs_get_result(req:RawConstPointer<UvFsT>):SSizeT;
	@:native("uv_fs_get_system_error") static function fs_get_system_error(req:RawConstPointer<UvFsT>):Int;
	@:native("uv_fs_get_ptr") static function fs_get_ptr(req:RawConstPointer<UvFsT>):RawPointer<cpp.Void>;
	@:native("uv_fs_get_path") static function fs_get_path(req:RawConstPointer<UvFsT>):ConstCharStar;
	@:native("uv_fs_get_statbuf") static function fs_get_statbuf(req:RawPointer<UvFsT>):RawPointer<UvStatT>;
	@:native("uv_get_osfhandle") static function get_osfhandle(fd:Int):UvOsFdT;
	@:native("uv_open_osfhandle") static function open_osfhandle(os_fd:UvOsFdT):Int;
	@:native("uv_fs_event_init") static function fs_event_init(loop:RawPointer<UvLoopT>, handle:RawPointer<UvFsEventT>):Int;
	@:native("uv_fs_event_start") static function fs_event_start(handle:RawPointer<UvFsEventT>, cb:UvFsEventCb, path:ConstCharStar, flags:UInt32):Int;
	@:native("uv_fs_event_stop") static function fs_event_stop(handle:RawPointer<UvFsEventT>):Int;
	@:native("uv_fs_event_getpath") static function fs_event_getpath(handle:RawPointer<UvFsEventT>, buffer:RawPointer<Char>, size:RawPointer<SizeT>):Int;
	@:native("uv_fs_poll_init") static function fs_poll_init(loop:RawPointer<UvLoopT>, handle:RawPointer<UvFsPollT>):Int;
	@:native("uv_fs_poll_start") static function fs_poll_start(handle:RawPointer<UvFsPollT>, poll_cb:UvFsPollCb, path:ConstCharStar, interval:UInt32):Int;
	@:native("uv_fs_poll_stop") static function fs_poll_stop(handle:RawPointer<UvFsPollT>):Int;
	@:native("uv_fs_poll_getpath") static function fs_poll_getpath(handle:RawPointer<UvFsPollT>, buffer:RawPointer<Char>, size:RawPointer<SizeT>):Int;
	@:native("uv_is_active") static function is_active(handle:RawConstPointer<UvHandleT>):Int;
	@:native("uv_is_closing") static function is_closing(handle:RawConstPointer<UvHandleT>):Int;
	@:native("uv_close") static function close(handle:RawPointer<UvHandleT>, close_cb:UvCloseCb):Void;
	@:native("uv_ref") static function ref(handle:RawPointer<UvHandleT>):Void;
	@:native("uv_unref") static function unref(handle:RawPointer<UvHandleT>):Void;
	@:native("uv_has_ref") static function has_ref(handle:RawConstPointer<UvHandleT>):Int;
	@:native("uv_handle_size") static function handle_size(type:UvHandleType):SizeT;
	@:native("uv_send_buffer_size") static function send_buffer_size(handle:RawPointer<UvHandleT>, value:RawPointer<Int>):Int;
	@:native("uv_recv_buffer_size") static function recv_buffer_size(handle:RawPointer<UvHandleT>, value:RawPointer<Int>):Int;
	@:native("uv_fileno") static function fileno(handle:RawConstPointer<UvHandleT>, fd:RawPointer<UvOsFdT>):Int;
	@:native("uv_handle_get_loop") static function handle_get_loop(handle:RawConstPointer<UvHandleT>):RawPointer<UvLoopT>;
	@:native("uv_handle_get_data") static function handle_get_data(handle:RawConstPointer<UvHandleT>):RawPointer<cpp.Void>;
	@:native("uv_handle_set_data") static function handle_set_data(handle:RawPointer<UvHandleT>, data:RawPointer<cpp.Void>):RawPointer<cpp.Void>;
	@:native("uv_handle_get_type") static function handle_get_type(handle:RawConstPointer<UvHandleT>):UvHandleType;
	@:native("uv_handle_type_name") static function handle_type_name(type:UvHandleType):ConstCharStar;
	@:native("uv_idle_init") static function idle_init(loop:RawPointer<UvLoopT>, idle:RawPointer<UvIdleT>):Int;
	@:native("uv_idle_start") static function idle_start(idle:RawPointer<UvIdleT>, cb:UvIdleCb):Int;
	@:native("uv_idle_stop") static function idle_stop(idle:RawPointer<UvIdleT>):Int;
	@:native("uv_loop_init") static function loop_init(loop:RawPointer<UvLoopT>):Int;
	@:native("uv_loop_configure") static function loop_configure(loop:RawPointer<UvLoopT>, option:UvLoopOption, v:Rest<Any>):Int;
	@:native("uv_loop_close") static function loop_close(loop:RawPointer<UvLoopT>):Int;
	@:native("uv_default_loop") static function default_loop():RawPointer<UvLoopT>;
	@:native("uv_run") static function run(loop:RawPointer<UvLoopT>, mode:UvRunMode):Int;
	@:native("uv_loop_alive") static function loop_alive(loop:RawConstPointer<UvLoopT>):Int;
	@:native("uv_stop") static function stop(loop:RawPointer<UvLoopT>):Void;
	@:native("uv_loop_size") static function loop_size():SizeT;
	@:native("uv_backend_fd") static function backend_fd(loop:RawConstPointer<UvLoopT>):Int;
	@:native("uv_backend_timeout") static function backend_timeout(loop:RawConstPointer<UvLoopT>):Int;
	@:native("uv_now") static function now(loop:RawConstPointer<UvLoopT>):UInt64;
	@:native("uv_update_time") static function update_time(loop:RawPointer<UvLoopT>):Void;
	@:native("uv_walk") static function walk(loop:RawPointer<UvLoopT>, walk_cb:UvWalkCb, arg:RawPointer<cpp.Void>):Void;
	@:native("uv_loop_fork") static function loop_fork(loop:RawPointer<UvLoopT>):Int;
	@:native("uv_loop_get_data") static function loop_get_data(loop:RawConstPointer<UvLoopT>):RawPointer<cpp.Void>;
	@:native("uv_loop_set_data") static function loop_set_data(loop:RawPointer<UvLoopT>, data:RawPointer<cpp.Void>):RawPointer<cpp.Void>;
	@:native("uv_metrics_idle_time") static function metrics_idle_time(loop:RawPointer<UvLoopT>):UInt64;
	@:native("uv_guess_handle") static function guess_handle(file:UvFile):UvHandleType;
	@:native("uv_replace_allocator") static function replace_allocator(malloc_func:UvMallocFunc, realloc_func:UvReallocFunc, calloc_func:UvCallocFunc, free_func:UvFreeFunc):Int;
	@:native("uv_library_shutdown") static function library_shutdown():Void;
	@:native("uv_buf_init") static function buf_init(base:RawPointer<Char>, len:UInt32):UvBufT;
	@:native("uv_setup_args") static function setup_args(argc:Int, argv:RawPointer<RawPointer<Char>>):RawPointer<RawPointer<Char>>;
	@:native("uv_get_process_title") static function get_process_title(buffer:RawPointer<Char>, size:SizeT):Int;
	@:native("uv_set_process_title") static function set_process_title(title:ConstCharStar):Int;
	@:native("uv_resident_set_memory") static function resident_set_memory(rss:RawPointer<SizeT>):Int;
	@:native("uv_uptime") static function uptime(uptime:RawPointer<Float>):Int;
	@:native("uv_getrusage") static function getrusage(rusage:RawPointer<UvRusageT>):Int;
	@:native("uv_os_getpid") static function os_getpid():UvPidT;
	@:native("uv_os_getppid") static function os_getppid():UvPidT;
	@:native("uv_cpu_info") static function cpu_info(cpu_infos:RawPointer<RawPointer<UvCpuInfoT>>, count:RawPointer<Int>):Int;
	@:native("uv_free_cpu_info") static function free_cpu_info(cpu_infos:RawPointer<UvCpuInfoT>, count:Int):Void;
	@:native("uv_interface_addresses") static function interface_addresses(addresses:RawPointer<RawPointer<UvInterfaceAddressT>>, count:RawPointer<Int>):Int;
	@:native("uv_free_interface_addresses") static function free_interface_addresses(addresses:RawPointer<UvInterfaceAddressT>, count:Int):Void;
	@:native("uv_loadavg") static function loadavg(avg:RawPointer<Float>):Void;
	@:native("uv_ip4_addr") static function ip4_addr(ip:ConstCharStar, port:Int, addr:RawPointer<SockaddrIn>):Int;
	@:native("uv_ip6_addr") static function ip6_addr(ip:ConstCharStar, port:Int, addr:RawPointer<SockaddrIn6>):Int;
	@:native("uv_ip4_name") static function ip4_name(src:RawConstPointer<SockaddrIn>, dst:RawPointer<Char>, size:SizeT):Int;
	@:native("uv_ip6_name") static function ip6_name(src:RawConstPointer<SockaddrIn6>, dst:RawPointer<Char>, size:SizeT):Int;
	@:native("uv_inet_ntop") static function inet_ntop(af:Int, src:RawConstPointer<cpp.Void>, dst:RawPointer<Char>, size:SizeT):Int;
	@:native("uv_inet_pton") static function inet_pton(af:Int, src:ConstCharStar, dst:RawPointer<cpp.Void>):Int;
	@:native("uv_if_indextoname") static function if_indextoname(ifindex:UInt32, buffer:RawPointer<Char>, size:RawPointer<SizeT>):Int;
	@:native("uv_if_indextoiid") static function if_indextoiid(ifindex:UInt32, buffer:RawPointer<Char>, size:RawPointer<SizeT>):Int;
	@:native("uv_exepath") static function exepath(buffer:RawPointer<Char>, size:RawPointer<SizeT>):Int;
	@:native("uv_cwd") static function cwd(buffer:RawPointer<Char>, size:RawPointer<SizeT>):Int;
	@:native("uv_chdir") static function chdir(dir:ConstCharStar):Int;
	@:native("uv_os_homedir") static function os_homedir(buffer:RawPointer<Char>, size:RawPointer<SizeT>):Int;
	@:native("uv_os_tmpdir") static function os_tmpdir(buffer:RawPointer<Char>, size:RawPointer<SizeT>):Int;
	@:native("uv_os_get_passwd") static function os_get_passwd(pwd:RawPointer<UvPasswdT>):Int;
	@:native("uv_os_free_passwd") static function os_free_passwd(pwd:RawPointer<UvPasswdT>):Void;
	@:native("uv_get_free_memory") static function get_free_memory():UInt64;
	@:native("uv_get_total_memory") static function get_total_memory():UInt64;
	@:native("uv_get_constrained_memory") static function get_constrained_memory():UInt64;
	@:native("uv_hrtime") static function hrtime():UInt64;
	@:native("uv_print_all_handles") static function print_all_handles(loop:RawPointer<UvLoopT>, stream:RawPointer<FILE>):Void;
	@:native("uv_print_active_handles") static function print_active_handles(loop:RawPointer<UvLoopT>, stream:RawPointer<FILE>):Void;
	@:native("uv_os_environ") static function os_environ(envitems:RawPointer<RawPointer<UvEnvItemT>>, count:RawPointer<Int>):Int;
	@:native("uv_os_free_environ") static function os_free_environ(envitems:RawPointer<UvEnvItemT>, count:Int):Void;
	@:native("uv_os_getenv") static function os_getenv(name:ConstCharStar, buffer:RawPointer<Char>, size:RawPointer<SizeT>):Int;
	@:native("uv_os_setenv") static function os_setenv(name:ConstCharStar, value:ConstCharStar):Int;
	@:native("uv_os_unsetenv") static function os_unsetenv(name:ConstCharStar):Int;
	@:native("uv_os_gethostname") static function os_gethostname(buffer:RawPointer<Char>, size:RawPointer<SizeT>):Int;
	@:native("uv_os_getpriority") static function os_getpriority(pid:UvPidT, priority:RawPointer<Int>):Int;
	@:native("uv_os_setpriority") static function os_setpriority(pid:UvPidT, priority:Int):Int;
	@:native("uv_os_uname") static function os_uname(buffer:RawPointer<UvUtsnameT>):Int;
	@:native("uv_gettimeofday") static function gettimeofday(tv:RawPointer<UvTimeval64T>):Int;
	@:native("uv_random") static function random(loop:RawPointer<UvLoopT>, req:RawPointer<UvRandomT>, buf:RawPointer<cpp.Void>, buflen:SizeT, flags:UInt32, cb:UvRandomCb):Int;
	@:native("uv_sleep") static function sleep(msec:UInt32):Void;
	@:native("uv_pipe_init") static function pipe_init(loop:RawPointer<UvLoopT>, handle:RawPointer<UvPipeT>, ipc:Int):Int;
	@:native("uv_pipe_open") static function pipe_open(handle:RawPointer<UvPipeT>, file:UvFile):Int;
	@:native("uv_pipe_bind") static function pipe_bind(handle:RawPointer<UvPipeT>, name:ConstCharStar):Int;
	@:native("uv_pipe_connect") static function pipe_connect(req:RawPointer<UvConnectT>, handle:RawPointer<UvPipeT>, name:ConstCharStar, cb:UvConnectCb):Void;
	@:native("uv_pipe_getsockname") static function pipe_getsockname(handle:RawConstPointer<UvPipeT>, buffer:RawPointer<Char>, size:RawPointer<SizeT>):Int;
	@:native("uv_pipe_getpeername") static function pipe_getpeername(handle:RawConstPointer<UvPipeT>, buffer:RawPointer<Char>, size:RawPointer<SizeT>):Int;
	@:native("uv_pipe_pending_instances") static function pipe_pending_instances(handle:RawPointer<UvPipeT>, count:Int):Void;
	@:native("uv_pipe_pending_count") static function pipe_pending_count(handle:RawPointer<UvPipeT>):Int;
	@:native("uv_pipe_pending_type") static function pipe_pending_type(handle:RawPointer<UvPipeT>):UvHandleType;
	@:native("uv_pipe_chmod") static function pipe_chmod(handle:RawPointer<UvPipeT>, flags:Int):Int;
	@:native("uv_pipe") static function pipe(fds:RawPointer<UvFile>, read_flags:Int, write_flags:Int):Int;
	@:native("uv_prepare_init") static function prepare_init(loop:RawPointer<UvLoopT>, prepare:RawPointer<UvPrepareT>):Int;
	@:native("uv_prepare_start") static function prepare_start(prepare:RawPointer<UvPrepareT>, cb:UvPrepareCb):Int;
	@:native("uv_prepare_stop") static function prepare_stop(prepare:RawPointer<UvPrepareT>):Int;
	@:native("uv_disable_stdio_inheritance") static function disable_stdio_inheritance():Void;
	@:native("uv_spawn") static function spawn(loop:RawPointer<UvLoopT>, handle:RawPointer<UvProcessT>, options:RawConstPointer<UvProcessOptionsT>):Int;
	@:native("uv_process_kill") static function process_kill(handle:RawPointer<UvProcessT>, signum:Int):Int;
	@:native("uv_kill") static function kill(pid:Int, signum:Int):Int;
	@:native("uv_process_get_pid") static function process_get_pid(handle:RawConstPointer<UvProcessT>):UvPidT;
	@:native("uv_cancel") static function cancel(req:RawPointer<UvReqT>):Int;
	@:native("uv_req_size") static function req_size(type:UvReqType):SizeT;
	@:native("uv_req_get_data") static function req_get_data(req:RawConstPointer<UvReqT>):RawPointer<cpp.Void>;
	@:native("uv_req_set_data") static function req_set_data(req:RawPointer<UvReqT>, data:RawPointer<cpp.Void>):RawPointer<cpp.Void>;
	@:native("uv_req_get_type") static function req_get_type(req:RawConstPointer<UvReqT>):UvReqType;
	@:native("uv_req_type_name") static function req_type_name(type:UvReqType):ConstCharStar;
	@:native("uv_signal_init") static function signal_init(loop:RawPointer<UvLoopT>, signal:RawPointer<UvSignalT>):Int;
	@:native("uv_signal_start") static function signal_start(signal:RawPointer<UvSignalT>, cb:UvSignalCb, signum:Int):Int;
	@:native("uv_signal_start_oneshot") static function signal_start_oneshot(signal:RawPointer<UvSignalT>, cb:UvSignalCb, signum:Int):Int;
	@:native("uv_signal_stop") static function signal_stop(signal:RawPointer<UvSignalT>):Int;
	@:native("uv_shutdown") static function shutdown(req:RawPointer<UvShutdownT>, handle:RawPointer<UvStreamT>, cb:UvShutdownCb):Int;
	@:native("uv_listen") static function listen(stream:RawPointer<UvStreamT>, backlog:Int, cb:UvConnectionCb):Int;
	@:native("uv_accept") static function accept(server:RawPointer<UvStreamT>, client:RawPointer<UvStreamT>):Int;
	@:native("uv_read_start") static function read_start(stream:RawPointer<UvStreamT>, alloc_cb:UvAllocCb, read_cb:UvReadCb):Int;
	@:native("uv_read_stop") static function read_stop(stream:RawPointer<UvStreamT>):Int;
	@:native("uv_write") static function write(req:RawPointer<UvWriteT>, handle:RawPointer<UvStreamT>, bufs:RawPointer<UvBufT>, nbufs:UInt32, cb:UvWriteCb):Int;
	@:native("uv_write2") static function write2(req:RawPointer<UvWriteT>, handle:RawPointer<UvStreamT>, bufs:RawPointer<UvBufT>, nbufs:UInt32, send_handle:RawPointer<UvStreamT>, cb:UvWriteCb):Int;
	@:native("uv_try_write") static function try_write(handle:RawPointer<UvStreamT>, bufs:RawPointer<UvBufT>, nbufs:UInt32):Int;
	@:native("uv_try_write2") static function try_write2(handle:RawPointer<UvStreamT>, bufs:RawPointer<UvBufT>, nbufs:UInt32, send_handle:RawPointer<UvStreamT>):Int;
	@:native("uv_is_readable") static function is_readable(handle:RawConstPointer<UvStreamT>):Int;
	@:native("uv_is_writable") static function is_writable(handle:RawConstPointer<UvStreamT>):Int;
	@:native("uv_stream_set_blocking") static function stream_set_blocking(handle:RawPointer<UvStreamT>, blocking:Int):Int;
	@:native("uv_stream_get_write_queue_size") static function stream_get_write_queue_size(stream:RawConstPointer<UvStreamT>):SizeT;
	@:native("uv_tcp_init") static function tcp_init(loop:RawPointer<UvLoopT>, handle:RawPointer<UvTcpT>):Int;
	@:native("uv_tcp_init_ex") static function tcp_init_ex(loop:RawPointer<UvLoopT>, handle:RawPointer<UvTcpT>, flags:UInt32):Int;
	@:native("uv_tcp_open") static function tcp_open(handle:RawPointer<UvTcpT>, sock:UvOsSockT):Int;
	@:native("uv_tcp_nodelay") static function tcp_nodelay(handle:RawPointer<UvTcpT>, enable:Int):Int;
	@:native("uv_tcp_keepalive") static function tcp_keepalive(handle:RawPointer<UvTcpT>, enable:Int, delay:UInt32):Int;
	@:native("uv_tcp_simultaneous_accepts") static function tcp_simultaneous_accepts(handle:RawPointer<UvTcpT>, enable:Int):Int;
	@:native("uv_tcp_bind") static function tcp_bind(handle:RawPointer<UvTcpT>, addr:RawConstPointer<Sockaddr>, flags:UInt32):Int;
	@:native("uv_tcp_getsockname") static function tcp_getsockname(handle:RawConstPointer<UvTcpT>, name:RawPointer<Sockaddr>, namelen:RawPointer<Int>):Int;
	@:native("uv_tcp_getpeername") static function tcp_getpeername(handle:RawConstPointer<UvTcpT>, name:RawPointer<Sockaddr>, namelen:RawPointer<Int>):Int;
	@:native("uv_tcp_connect") static function tcp_connect(req:RawPointer<UvConnectT>, handle:RawPointer<UvTcpT>, addr:RawConstPointer<Sockaddr>, cb:UvConnectCb):Int;
	@:native("uv_tcp_close_reset") static function tcp_close_reset(handle:RawPointer<UvTcpT>, close_cb:UvCloseCb):Int;
	@:native("uv_socketpair") static function socketpair(type:Int, protocol:Int, socket_vector:RawPointer<UvOsSockT>, flags0:Int, flags1:Int):Int;
	@:native("uv_timer_init") static function timer_init(loop:RawPointer<UvLoopT>, handle:RawPointer<UvTimerT>):Int;
	@:native("uv_timer_start") static function timer_start(handle:RawPointer<UvTimerT>, cb:UvTimerCb, timeout:UInt64, repeat:UInt64):Int;
	@:native("uv_timer_stop") static function timer_stop(handle:RawPointer<UvTimerT>):Int;
	@:native("uv_timer_again") static function timer_again(handle:RawPointer<UvTimerT>):Int;
	@:native("uv_timer_set_repeat") static function timer_set_repeat(handle:RawPointer<UvTimerT>, repeat:UInt64):Void;
	@:native("uv_timer_get_repeat") static function timer_get_repeat(handle:RawConstPointer<UvTimerT>):UInt64;
	@:native("uv_timer_get_due_in") static function timer_get_due_in(handle:RawConstPointer<UvTimerT>):UInt64;
	@:native("uv_tty_init") static function tty_init(loop:RawPointer<UvLoopT>, handle:RawPointer<UvTtyT>, fd:UvFile, unused:Int):Int;
	@:native("uv_tty_set_mode") static function tty_set_mode(handle:RawPointer<UvTtyT>, mode:UvTtyModeT):Int;
	@:native("uv_tty_reset_mode") static function tty_reset_mode():Int;
	@:native("uv_tty_get_winsize") static function tty_get_winsize(handle:RawPointer<UvTtyT>, width:RawPointer<Int>, height:RawPointer<Int>):Int;
	@:native("uv_tty_set_vterm_state") static function tty_set_vterm_state(state:UvTtyVtermstateT):Void;
	@:native("uv_tty_get_vterm_state") static function tty_get_vterm_state(state:RawPointer<UvTtyVtermstateT>):Int;
	@:native("uv_udp_init") static function udp_init(loop:RawPointer<UvLoopT>, handle:RawPointer<UvUdpT>):Int;
	@:native("uv_udp_init_ex") static function udp_init_ex(loop:RawPointer<UvLoopT>, handle:RawPointer<UvUdpT>, flags:UInt32):Int;
	@:native("uv_udp_open") static function udp_open(handle:RawPointer<UvUdpT>, sock:UvOsSockT):Int;
	@:native("uv_udp_bind") static function udp_bind(handle:RawPointer<UvUdpT>, addr:RawConstPointer<Sockaddr>, flags:UInt32):Int;
	@:native("uv_udp_connect") static function udp_connect(handle:RawPointer<UvUdpT>, addr:RawConstPointer<Sockaddr>):Int;
	@:native("uv_udp_getpeername") static function udp_getpeername(handle:RawConstPointer<UvUdpT>, name:RawPointer<Sockaddr>, namelen:RawPointer<Int>):Int;
	@:native("uv_udp_getsockname") static function udp_getsockname(handle:RawConstPointer<UvUdpT>, name:RawPointer<Sockaddr>, namelen:RawPointer<Int>):Int;
	@:native("uv_udp_set_membership") static function udp_set_membership(handle:RawPointer<UvUdpT>, multicast_addr:ConstCharStar, interface_addr:ConstCharStar, membership:UvMembership):Int;
	@:native("uv_udp_set_source_membership") static function udp_set_source_membership(handle:RawPointer<UvUdpT>, multicast_addr:ConstCharStar, interface_addr:ConstCharStar, source_addr:ConstCharStar, membership:UvMembership):Int;
	@:native("uv_udp_set_multicast_loop") static function udp_set_multicast_loop(handle:RawPointer<UvUdpT>, on:Int):Int;
	@:native("uv_udp_set_multicast_ttl") static function udp_set_multicast_ttl(handle:RawPointer<UvUdpT>, ttl:Int):Int;
	@:native("uv_udp_set_multicast_interface") static function udp_set_multicast_interface(handle:RawPointer<UvUdpT>, interface_addr:ConstCharStar):Int;
	@:native("uv_udp_set_broadcast") static function udp_set_broadcast(handle:RawPointer<UvUdpT>, on:Int):Int;
	@:native("uv_udp_set_ttl") static function udp_set_ttl(handle:RawPointer<UvUdpT>, ttl:Int):Int;
	@:native("uv_udp_send") static function udp_send(req:RawPointer<UvUdpSendT>, handle:RawPointer<UvUdpT>, bufs:RawPointer<UvBufT>, nbufs:UInt32, addr:RawConstPointer<Sockaddr>, send_cb:UvUdpSendCb):Int;
	@:native("uv_udp_try_send") static function udp_try_send(handle:RawPointer<UvUdpT>, bufs:RawPointer<UvBufT>, nbufs:UInt32, addr:RawConstPointer<Sockaddr>):Int;
	@:native("uv_udp_recv_start") static function udp_recv_start(handle:RawPointer<UvUdpT>, alloc_cb:UvAllocCb, recv_cb:UvUdpRecvCb):Int;
	@:native("uv_udp_using_recvmmsg") static function udp_using_recvmmsg(handle:RawPointer<UvUdpT>):Int;
	@:native("uv_udp_recv_stop") static function udp_recv_stop(handle:RawPointer<UvUdpT>):Int;
	@:native("uv_udp_get_send_queue_size") static function udp_get_send_queue_size(handle:RawConstPointer<UvUdpT>):SizeT;
	@:native("uv_udp_get_send_queue_count") static function udp_get_send_queue_count(handle:RawConstPointer<UvUdpT>):SizeT;
	@:native("uv_version") static function version():UInt32;
	@:native("uv_version_string") static function version_string():ConstCharStar;
}


@:native("uv_write_t")
@:structAccess extern class UvWriteT {
	@:native("new uv_write_t") static function create():RawPointer<UvWriteT>;
}

typedef UvWriteCb = Callable<(req:RawPointer<UvWriteT>, status:Int)->Void>

typedef UvWalkCb = Callable<(handle:RawPointer<UvHandleT>, arg:RawPointer<cpp.Void>)->Void>

@:native("uv_utsname_t")
@:structAccess extern class UvUtsnameT {
	function new():Void;
	@:native("new uv_utsname_t") static function create():RawPointer<UvUtsnameT>;
	var sysname:RawPointer<Char>;
	var release:RawPointer<Char>;
	var version:RawPointer<Char>;
	var machine:RawPointer<Char>;
}

@:native("uv_udp_t")
@:structAccess extern class UvUdpT {
	@:native("new uv_udp_t") static function create():RawPointer<UvUdpT>;
}

@:native("uv_udp_send_t")
@:structAccess extern class UvUdpSendT {
	@:native("new uv_udp_send_t") static function create():RawPointer<UvUdpSendT>;
}

typedef UvUdpSendCb = Callable<(req:RawPointer<UvUdpSendT>, status:Int)->Void>

typedef UvUdpRecvCb = Callable<(handle:RawPointer<UvUdpT>, nread:SSizeT, buf:RawConstPointer<UvBufT>, addr:RawConstPointer<Sockaddr>, flags:UInt32)->Void>

@:coreType @:native("uv_udp_flags")
extern enum abstract UvUdpFlags to Int {
	@:native("UV_UDP_IPV6ONLY") var UV_UDP_IPV6ONLY;
	@:native("UV_UDP_PARTIAL") var UV_UDP_PARTIAL;
	@:native("UV_UDP_REUSEADDR") var UV_UDP_REUSEADDR;
	@:native("UV_UDP_MMSG_CHUNK") var UV_UDP_MMSG_CHUNK;
	@:native("UV_UDP_MMSG_FREE") var UV_UDP_MMSG_FREE;
	@:native("UV_UDP_LINUX_RECVERR") var UV_UDP_LINUX_RECVERR;
	@:native("UV_UDP_RECVMMSG") var UV_UDP_RECVMMSG;
}

@:coreType @:native("uv_tty_vtermstate_t")
extern enum abstract UvTtyVtermstateT to Int {
	@:native("UV_TTY_SUPPORTED") var UV_TTY_SUPPORTED;
	@:native("UV_TTY_UNSUPPORTED") var UV_TTY_UNSUPPORTED;
}

@:native("uv_tty_t")
@:structAccess extern class UvTtyT {
	@:native("new uv_tty_t") static function create():RawPointer<UvTtyT>;
}

@:coreType @:native("uv_tty_mode_t")
extern enum abstract UvTtyModeT to Int {
	@:native("UV_TTY_MODE_NORMAL") var UV_TTY_MODE_NORMAL;
	@:native("UV_TTY_MODE_RAW") var UV_TTY_MODE_RAW;
	@:native("UV_TTY_MODE_IO") var UV_TTY_MODE_IO;
}

@:native("uv_timeval_t")
@:structAccess extern class UvTimevalT {
	function new():Void;
	@:native("new uv_timeval_t") static function create():RawPointer<UvTimevalT>;
	var tv_sec:Int64;
	var tv_usec:Int64;
}

@:native("uv_timeval64_t")
@:structAccess extern class UvTimeval64T {
	function new():Void;
	@:native("new uv_timeval64_t") static function create():RawPointer<UvTimeval64T>;
	var tv_sec:Int64;
	var tv_usec:Int32;
}

@:native("uv_timespec_t")
@:structAccess extern class UvTimespecT {
	function new():Void;
	@:native("new uv_timespec_t") static function create():RawPointer<UvTimespecT>;
	var tv_sec:Int64;
	var tv_nsec:Int64;
}

@:native("uv_timer_t")
@:structAccess extern class UvTimerT {
	@:native("new uv_timer_t") static function create():RawPointer<UvTimerT>;
}

typedef UvTimerCb = Callable<(handle:RawPointer<UvTimerT>)->Void>

@:native("uv_tcp_t")
@:structAccess extern class UvTcpT {
	@:native("new uv_tcp_t") static function create():RawPointer<UvTcpT>;
}

@:native("uv_stream_t")
@:structAccess extern class UvStreamT {
	@:native("new uv_stream_t") static function create():RawPointer<UvStreamT>;
}

@:coreType @:native("uv_stdio_flags")
extern enum abstract UvStdioFlags to Int {
	@:native("UV_IGNORE") var UV_IGNORE;
	@:native("UV_CREATE_PIPE") var UV_CREATE_PIPE;
	@:native("UV_INHERIT_FD") var UV_INHERIT_FD;
	@:native("UV_INHERIT_STREAM") var UV_INHERIT_STREAM;
	@:native("UV_READABLE_PIPE") var UV_READABLE_PIPE;
	@:native("UV_WRITABLE_PIPE") var UV_WRITABLE_PIPE;
	@:native("UV_NONBLOCK_PIPE") var UV_NONBLOCK_PIPE;
}

@:structAccess extern class UvStdioContainerTDataUnion {
	var stream:RawPointer<UvStreamT>;
	var fd:Int;
}

@:native("uv_stdio_container_t")
@:structAccess extern class UvStdioContainerT {
	function new():Void;
	@:native("new uv_stdio_container_t") static function create():RawPointer<UvStdioContainerT>;
	var flags:UvStdioFlags;
	var data:UvStdioContainerTDataUnion;
}

@:native("uv_statfs_t")
@:structAccess extern class UvStatfsT {
	function new():Void;
	@:native("new uv_statfs_t") static function create():RawPointer<UvStatfsT>;
	var f_type:UInt64;
	var f_bsize:UInt64;
	var f_blocks:UInt64;
	var f_bfree:UInt64;
	var f_bavail:UInt64;
	var f_files:UInt64;
	var f_ffree:UInt64;
	var f_spare:RawPointer<UInt64>;
}

@:native("uv_stat_t")
@:structAccess extern class UvStatT {
	function new():Void;
	@:native("new uv_stat_t") static function create():RawPointer<UvStatT>;
	var st_dev:UInt64;
	var st_mode:UInt64;
	var st_nlink:UInt64;
	var st_uid:UInt64;
	var st_gid:UInt64;
	var st_rdev:UInt64;
	var st_ino:UInt64;
	var st_size:UInt64;
	var st_blksize:UInt64;
	var st_blocks:UInt64;
	var st_flags:UInt64;
	var st_gen:UInt64;
	var st_atim:UvTimespecT;
	var st_mtim:UvTimespecT;
	var st_ctim:UvTimespecT;
	var st_birthtim:UvTimespecT;
}

@:native("uv_signal_t")
@:structAccess extern class UvSignalT {
	@:native("new uv_signal_t") static function create():RawPointer<UvSignalT>;
}

typedef UvSignalCb = Callable<(handle:RawPointer<UvSignalT>, signum:Int)->Void>

@:native("uv_shutdown_t")
@:structAccess extern class UvShutdownT {
	@:native("new uv_shutdown_t") static function create():RawPointer<UvShutdownT>;
}

typedef UvShutdownCb = Callable<(req:RawPointer<UvShutdownT>, status:Int)->Void>

@:native("uv_rusage_t")
@:structAccess extern class UvRusageT {
	function new():Void;
	@:native("new uv_rusage_t") static function create():RawPointer<UvRusageT>;
	var ru_utime:UvTimevalT;
	var ru_stime:UvTimevalT;
	var ru_maxrss:UInt64;
	var ru_ixrss:UInt64;
	var ru_idrss:UInt64;
	var ru_isrss:UInt64;
	var ru_minflt:UInt64;
	var ru_majflt:UInt64;
	var ru_nswap:UInt64;
	var ru_inblock:UInt64;
	var ru_oublock:UInt64;
	var ru_msgsnd:UInt64;
	var ru_msgrcv:UInt64;
	var ru_nsignals:UInt64;
	var ru_nvcsw:UInt64;
	var ru_nivcsw:UInt64;
}

@:coreType @:native("uv_run_mode")
extern enum abstract UvRunMode to Int {
	@:native("UV_RUN_DEFAULT") var UV_RUN_DEFAULT;
	@:native("UV_RUN_ONCE") var UV_RUN_ONCE;
	@:native("UV_RUN_NOWAIT") var UV_RUN_NOWAIT;
}

@:coreType @:native("uv_req_type")
extern enum abstract UvReqType to Int {
	@:native("UV_UNKNOWN_REQ") var UV_UNKNOWN_REQ;
	@:native("UV_REQ") var UV_REQ;
	@:native("UV_CONNECT") var UV_CONNECT;
	@:native("UV_WRITE") var UV_WRITE;
	@:native("UV_SHUTDOWN") var UV_SHUTDOWN;
	@:native("UV_UDP_SEND") var UV_UDP_SEND;
	@:native("UV_FS") var UV_FS;
	@:native("UV_WORK") var UV_WORK;
	@:native("UV_GETADDRINFO") var UV_GETADDRINFO;
	@:native("UV_GETNAMEINFO") var UV_GETNAMEINFO;
	@:native("UV_REQ_TYPE_MAX") var UV_REQ_TYPE_MAX;
}

@:native("uv_req_t")
@:structAccess extern class UvReqT {
	@:native("new uv_req_t") static function create():RawPointer<UvReqT>;
}

typedef UvReallocFunc = Callable<(ptr:RawPointer<cpp.Void>, size:SizeT)->RawPointer<cpp.Void>>

typedef UvReadCb = Callable<(stream:RawPointer<UvStreamT>, nread:SSizeT, buf:RawConstPointer<UvBufT>)->Void>

@:native("uv_random_t")
@:structAccess extern class UvRandomT {
	@:native("new uv_random_t") static function create():RawPointer<UvRandomT>;
}

typedef UvRandomCb = Callable<(req:RawPointer<UvRandomT>, status:Int, buf:RawPointer<cpp.Void>, buflen:SizeT)->Void>

@:native("uv_process_t")
@:structAccess extern class UvProcessT {
	@:native("new uv_process_t") static function create():RawPointer<UvProcessT>;
}

@:native("uv_process_options_t")
@:structAccess extern class UvProcessOptionsT {
	function new():Void;
	@:native("new uv_process_options_t") static function create():RawPointer<UvProcessOptionsT>;
	var exit_cb:UvExitCb;
	var file:ConstCharStar;
	var args:RawPointer<RawPointer<Char>>;
	var env:RawPointer<RawPointer<Char>>;
	var cwd:ConstCharStar;
	var flags:UInt32;
	var stdio_count:Int;
	var stdio:RawPointer<UvStdioContainerT>;
	var uid:UvUidT;
	var gid:UvGidT;
}

@:coreType @:native("uv_process_flags")
extern enum abstract UvProcessFlags to Int {
	@:native("UV_PROCESS_SETUID") var UV_PROCESS_SETUID;
	@:native("UV_PROCESS_SETGID") var UV_PROCESS_SETGID;
	@:native("UV_PROCESS_WINDOWS_VERBATIM_ARGUMENTS") var UV_PROCESS_WINDOWS_VERBATIM_ARGUMENTS;
	@:native("UV_PROCESS_DETACHED") var UV_PROCESS_DETACHED;
	@:native("UV_PROCESS_WINDOWS_HIDE") var UV_PROCESS_WINDOWS_HIDE;
	@:native("UV_PROCESS_WINDOWS_HIDE_CONSOLE") var UV_PROCESS_WINDOWS_HIDE_CONSOLE;
	@:native("UV_PROCESS_WINDOWS_HIDE_GUI") var UV_PROCESS_WINDOWS_HIDE_GUI;
}

@:native("uv_prepare_t")
@:structAccess extern class UvPrepareT {
	@:native("new uv_prepare_t") static function create():RawPointer<UvPrepareT>;
}

typedef UvPrepareCb = Callable<(handle:RawPointer<UvPrepareT>)->Void>

@:native("uv_pipe_t")
@:structAccess extern class UvPipeT {
	@:native("new uv_pipe_t") static function create():RawPointer<UvPipeT>;
}

@:native("uv_passwd_t")
@:structAccess extern class UvPasswdT {
	function new():Void;
	@:native("new uv_passwd_t") static function create():RawPointer<UvPasswdT>;
	var username:RawPointer<Char>;
	var uid:Int64;
	var gid:Int64;
	var shell:RawPointer<Char>;
	var homedir:RawPointer<Char>;
}

@:native("uv_os_fd_t")
@:structAccess extern class UvOsFdT {
	@:native("new uv_os_fd_t") static function create():RawPointer<UvOsFdT>;
}

@:coreType @:native("uv_membership")
extern enum abstract UvMembership to Int {
	@:native("UV_LEAVE_GROUP") var UV_LEAVE_GROUP;
	@:native("UV_JOIN_GROUP") var UV_JOIN_GROUP;
}

typedef UvMallocFunc = Callable<(size:SizeT)->RawPointer<cpp.Void>>

@:native("uv_loop_t")
@:structAccess extern class UvLoopT {
	@:native("new uv_loop_t") static function create():RawPointer<UvLoopT>;
}

@:structAccess extern class UvInterfaceAddressTNetmaskUnion {
	var netmask4:SockaddrIn;
	var netmask6:SockaddrIn6;
}

@:structAccess extern class UvInterfaceAddressTAddressUnion {
	var address4:SockaddrIn;
	var address6:SockaddrIn6;
}

@:native("uv_interface_address_t")
@:structAccess extern class UvInterfaceAddressT {
	function new():Void;
	@:native("new uv_interface_address_t") static function create():RawPointer<UvInterfaceAddressT>;
	var name:RawPointer<Char>;
	var phys_addr:RawPointer<Char>;
	var is_internal:Int;
	var address:UvInterfaceAddressTAddressUnion;
	var netmask:UvInterfaceAddressTNetmaskUnion;
}

@:native("uv_idle_t")
@:structAccess extern class UvIdleT {
	@:native("new uv_idle_t") static function create():RawPointer<UvIdleT>;
}

typedef UvIdleCb = Callable<(handle:RawPointer<UvIdleT>)->Void>

@:coreType @:native("uv_handle_type")
extern enum abstract UvHandleType to Int {
	@:native("UV_UNKNOWN_HANDLE") var UV_UNKNOWN_HANDLE;
	@:native("UV_ASYNC") var UV_ASYNC;
	@:native("UV_CHECK") var UV_CHECK;
	@:native("UV_FS_EVENT") var UV_FS_EVENT;
	@:native("UV_FS_POLL") var UV_FS_POLL;
	@:native("UV_HANDLE") var UV_HANDLE;
	@:native("UV_IDLE") var UV_IDLE;
	@:native("UV_NAMED_PIPE") var UV_NAMED_PIPE;
	@:native("UV_POLL") var UV_POLL;
	@:native("UV_PREPARE") var UV_PREPARE;
	@:native("UV_PROCESS") var UV_PROCESS;
	@:native("UV_STREAM") var UV_STREAM;
	@:native("UV_TCP") var UV_TCP;
	@:native("UV_TIMER") var UV_TIMER;
	@:native("UV_TTY") var UV_TTY;
	@:native("UV_UDP") var UV_UDP;
	@:native("UV_SIGNAL") var UV_SIGNAL;
	@:native("UV_FILE") var UV_FILE;
	@:native("UV_HANDLE_TYPE_MAX") var UV_HANDLE_TYPE_MAX;
}

@:native("uv_handle_t")
@:structAccess extern class UvHandleT {
	@:native("new uv_handle_t") static function create():RawPointer<UvHandleT>;
}

@:native("uv_getnameinfo_t")
@:structAccess extern class UvGetnameinfoT {
	@:native("new uv_getnameinfo_t") static function create():RawPointer<UvGetnameinfoT>;
}

typedef UvGetnameinfoCb = Callable<(req:RawPointer<UvGetnameinfoT>, status:Int, hostname:ConstCharStar, service:ConstCharStar)->Void>

@:native("uv_getaddrinfo_t")
@:structAccess extern class UvGetaddrinfoT {
	@:native("new uv_getaddrinfo_t") static function create():RawPointer<UvGetaddrinfoT>;
}

typedef UvGetaddrinfoCb = Callable<(req:RawPointer<UvGetaddrinfoT>, status:Int, res:RawPointer<Addrinfo>)->Void>

@:coreType @:native("uv_fs_type")
extern enum abstract UvFsType to Int {
	@:native("UV_FS_UNKNOWN") var UV_FS_UNKNOWN;
	@:native("UV_FS_CUSTOM") var UV_FS_CUSTOM;
	@:native("UV_FS_OPEN") var UV_FS_OPEN;
	@:native("UV_FS_CLOSE") var UV_FS_CLOSE;
	@:native("UV_FS_READ") var UV_FS_READ;
	@:native("UV_FS_WRITE") var UV_FS_WRITE;
	@:native("UV_FS_SENDFILE") var UV_FS_SENDFILE;
	@:native("UV_FS_STAT") var UV_FS_STAT;
	@:native("UV_FS_LSTAT") var UV_FS_LSTAT;
	@:native("UV_FS_FSTAT") var UV_FS_FSTAT;
	@:native("UV_FS_FTRUNCATE") var UV_FS_FTRUNCATE;
	@:native("UV_FS_UTIME") var UV_FS_UTIME;
	@:native("UV_FS_FUTIME") var UV_FS_FUTIME;
	@:native("UV_FS_ACCESS") var UV_FS_ACCESS;
	@:native("UV_FS_CHMOD") var UV_FS_CHMOD;
	@:native("UV_FS_FCHMOD") var UV_FS_FCHMOD;
	@:native("UV_FS_FSYNC") var UV_FS_FSYNC;
	@:native("UV_FS_FDATASYNC") var UV_FS_FDATASYNC;
	@:native("UV_FS_UNLINK") var UV_FS_UNLINK;
	@:native("UV_FS_RMDIR") var UV_FS_RMDIR;
	@:native("UV_FS_MKDIR") var UV_FS_MKDIR;
	@:native("UV_FS_MKDTEMP") var UV_FS_MKDTEMP;
	@:native("UV_FS_RENAME") var UV_FS_RENAME;
	@:native("UV_FS_SCANDIR") var UV_FS_SCANDIR;
	@:native("UV_FS_LINK") var UV_FS_LINK;
	@:native("UV_FS_SYMLINK") var UV_FS_SYMLINK;
	@:native("UV_FS_READLINK") var UV_FS_READLINK;
	@:native("UV_FS_CHOWN") var UV_FS_CHOWN;
	@:native("UV_FS_FCHOWN") var UV_FS_FCHOWN;
	@:native("UV_FS_REALPATH") var UV_FS_REALPATH;
	@:native("UV_FS_COPYFILE") var UV_FS_COPYFILE;
	@:native("UV_FS_LCHOWN") var UV_FS_LCHOWN;
	@:native("UV_FS_OPENDIR") var UV_FS_OPENDIR;
	@:native("UV_FS_READDIR") var UV_FS_READDIR;
	@:native("UV_FS_CLOSEDIR") var UV_FS_CLOSEDIR;
	@:native("UV_FS_MKSTEMP") var UV_FS_MKSTEMP;
	@:native("UV_FS_LUTIME") var UV_FS_LUTIME;
}

@:native("uv_fs_t")
@:structAccess extern class UvFsT {
	@:native("new uv_fs_t") static function create():RawPointer<UvFsT>;
}

@:native("uv_fs_poll_t")
@:structAccess extern class UvFsPollT {
	@:native("new uv_fs_poll_t") static function create():RawPointer<UvFsPollT>;
}

typedef UvFsPollCb = Callable<(handle:RawPointer<UvFsPollT>, status:Int, prev:RawConstPointer<UvStatT>, curr:RawConstPointer<UvStatT>)->Void>

@:native("uv_fs_event_t")
@:structAccess extern class UvFsEventT {
	@:native("new uv_fs_event_t") static function create():RawPointer<UvFsEventT>;
}

@:coreType @:native("uv_fs_event_flags")
extern enum abstract UvFsEventFlags to Int {
	@:native("UV_FS_EVENT_WATCH_ENTRY") var UV_FS_EVENT_WATCH_ENTRY;
	@:native("UV_FS_EVENT_STAT") var UV_FS_EVENT_STAT;
	@:native("UV_FS_EVENT_RECURSIVE") var UV_FS_EVENT_RECURSIVE;
}

typedef UvFsEventCb = Callable<(handle:RawPointer<UvFsEventT>, filename:ConstCharStar, events:Int, status:Int)->Void>

@:coreType @:native("uv_fs_event")
extern enum abstract UvFsEvent to Int {
	@:native("UV_RENAME") var UV_RENAME;
	@:native("UV_CHANGE") var UV_CHANGE;
}

typedef UvFreeFunc = Callable<(ptr:RawPointer<cpp.Void>)->Void>

typedef UvExitCb = Callable<(process:RawPointer<UvProcessT>, exit_status:Int64, term_signal:Int)->Void>

@:native("uv_env_item_t")
@:structAccess extern class UvEnvItemT {
	function new():Void;
	@:native("new uv_env_item_t") static function create():RawPointer<UvEnvItemT>;
	var name:RawPointer<Char>;
	var value:RawPointer<Char>;
}

@:coreType @:native("uv_dirent_type_t")
extern enum abstract UvDirentTypeT to Int {
	@:native("UV_DIRENT_UNKNOWN") var UV_DIRENT_UNKNOWN;
	@:native("UV_DIRENT_FILE") var UV_DIRENT_FILE;
	@:native("UV_DIRENT_DIR") var UV_DIRENT_DIR;
	@:native("UV_DIRENT_LINK") var UV_DIRENT_LINK;
	@:native("UV_DIRENT_FIFO") var UV_DIRENT_FIFO;
	@:native("UV_DIRENT_SOCKET") var UV_DIRENT_SOCKET;
	@:native("UV_DIRENT_CHAR") var UV_DIRENT_CHAR;
	@:native("UV_DIRENT_BLOCK") var UV_DIRENT_BLOCK;
}

@:native("uv_dirent_t")
@:structAccess extern class UvDirentT {
	function new():Void;
	@:native("new uv_dirent_t") static function create():RawPointer<UvDirentT>;
	var name:ConstCharStar;
	var type:UvDirentTypeT;
}

@:native("uv_dir_t")
@:structAccess extern class UvDirT {
	function new():Void;
	@:native("new uv_dir_t") static function create():RawPointer<UvDirT>;
	var dirents:RawPointer<UvDirentT>;
	var nentries:SizeT;
}

@:native("uv_cpu_times_s")
@:structAccess extern class UvCpuTimesS {
	function new():Void;
	@:native("new uv_cpu_times_s") static function create():RawPointer<UvCpuTimesS>;
	var user:UInt64;
	var nice:UInt64;
	var sys:UInt64;
	var idle:UInt64;
	var irq:UInt64;
}

@:native("uv_cpu_info_t")
@:structAccess extern class UvCpuInfoT {
	function new():Void;
	@:native("new uv_cpu_info_t") static function create():RawPointer<UvCpuInfoT>;
	var model:RawPointer<Char>;
	var speed:Int;
	var cpu_times:UvCpuTimesS;
}

typedef UvConnectionCb = Callable<(server:RawPointer<UvStreamT>, status:Int)->Void>

@:native("uv_connect_t")
@:structAccess extern class UvConnectT {
	@:native("new uv_connect_t") static function create():RawPointer<UvConnectT>;
}

typedef UvConnectCb = Callable<(req:RawPointer<UvConnectT>, status:Int)->Void>

typedef UvCloseCb = Callable<(handle:RawPointer<UvHandleT>)->Void>

@:native("uv_check_t")
@:structAccess extern class UvCheckT {
	@:native("new uv_check_t") static function create():RawPointer<UvCheckT>;
}

typedef UvCheckCb = Callable<(handle:RawPointer<UvCheckT>)->Void>

typedef UvCallocFunc = Callable<(count:SizeT, size:SizeT)->RawPointer<cpp.Void>>

@:native("uv_async_t")
@:structAccess extern class UvAsyncT {
	@:native("new uv_async_t") static function create():RawPointer<UvAsyncT>;
}

typedef UvAsyncCb = Callable<(handle:RawPointer<UvAsyncT>)->Void>

typedef UvAllocCb = Callable<(handle:RawPointer<UvHandleT>, suggested_size:SizeT, buf:RawPointer<UvBufT>)->Void>
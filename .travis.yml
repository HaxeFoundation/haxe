cache:
  timeout: 1000
  directories:
    - $HOME/.opam
    - $HOME/neko
    - $HOME/apt-cache
    - $HOME/hxcache
    - $HOME/_hxbuild
    - $HOME/lua_env
    - $HOME/.luarocks

before_cache:
  - if [ $TRAVIS_OS_NAME = 'linux' ]; then
      sudo apt-get autoclean;
      sudo rm -f $HOME/apt-cache/lock || true;
    fi
  #- if [ $TRAVIS_OS_NAME = 'osx' ]; then brew cleanup; fi

env:
  global:
    # make variables
    - ADD_REVISION=1
    # nightly builds submit
    - secure: "UoGjYvQqt66GWmeLC4Pih1iue5AufVgW8XQOd2Bx839NN/2mQQ9bD1HuONJe+taWBJ+PHInkAjYROYYaiCQUA7B1SXs3oQD7Og6arVcR7kY7XOdAQ2t8ZkxJHTnuYGWW/2gNFBESv+3H17bkXG4rzaSn2LV5PJLOxSjw0ziBUMY="
    - secure: "ugpxt+zeYiAiMYKLK96f5TLSxbQAtmDWiumdwaLHl88fIUeefxJJPIF1Xm0AHeYEJE7sD8dLE1dMbRSzOpXFfTmJoQZv19Wjv+2N5B+DaabKjGj1nZG7q3blGa3nUYzWVfFNFiIpM9c5fvW8yiUFzacZE5itEY8+lZQeGsNh+WQ="
    # SauceLabs
    # - secure: SjyKefmjUEXi0IKHGGpcbLAajU0mLHONg8aA8LoY7Q9nAkSN6Aql+fzS38Boq7w1jWn+2FOpr+4jy0l6wVd/bftsF+huFfYpFJmdh8BlKmE0K71zZAral0H1c7YxkuQpPiJCIFGXqtkvev7SWTy0z31u7kuuQeEyW27boXe5cDA=
    # - secure: sUvWUjCyPuWht4seNa4f2VG9DkvXkhZyLZfjJO9TUAHB2JndS16E2j/qrvKEjycyH6w8tU/B9vnjDRvvGrYXxEXcBEwsJVfkorFnRl9uwGCGIYrzjMhssEl3fMYZK7P304f+gAp5ULrDBX2gIaKeSa8lUNRtz2PsZOieE4kMdhk=
    # Bintray
    # - secure: "ETbwZaeRq8wIVZVyUk1IsNctYVuQa/U2biRkF9pQkz3MEXpaneynclVzNjm8rnm8JqfKcjUDUvQJBP1KYrJYq3tAJFhl31YUnS0FsF3sgLIcnHkhbRA24xJdIlCwHP6QUPoiyPbkec43NRwrF0071KOMD51vgUToXRtAe3o/15g="
    # - secure: "Fcrrge2f4jFYDOopig2rwkQvgJw6Ra8UK6OwTVk08wecytzVaOJK1TcB22PSvZ+h0ZLJs34T+pXHFjlNuSWm4+CwGSvnltRD1/svjS8zOqK7RzuUdzHz87yruz9PFqV63HTas6qtmgLqp8n/Q6AhtDLF39BTZPyDzEbi9qkwRuI="
    # - secure: "VBJDQNJ9uvdt0aszo7oU3txuRvjkuLmuHZGOkrd4wE/5B4sX5jzx/+dnrKcNTXJCmQ/rVLuMu9GyxqVjNHlzce678voxdQNOtNkNgpkr1qN9/A9rRnCp77hH27ErdthpWxbmcnE62hAJ83TIKSvn//5lAkx4sMCKS1NXEWQ5qec="
    # PPA configs
    - PPA="ppa:haxe/snapshots"
    - DEBFULLNAME="Haxe CI Bot"
    - DEBEMAIL="haxe-ci@onthewings.net"

sudo: required
dist: trusty
osx_image: xcode6.4
addons: &addons
  ssh_known_hosts:
    - haxe.org
    - api.haxe.org

install_linux: &install_linux
  - if [ ! -d "$HOME/neko" ]; then
      export CACHE_AVAILABLE=0;
    elif [ ! -d "$HOME/neko/.git" ]; then
      export CACHE_AVAILABLE=0;
    else
      export CACHE_AVAILABLE=1;
    fi
  # Install dependencies
  - export APT_CACHE_DIR=~/apt-cache && mkdir -pv $APT_CACHE_DIR
  - sudo add-apt-repository ppa:haxe/ocaml -y
  - sudo apt-get update -y
  - sudo apt-get -o dir::cache::archives="$APT_CACHE_DIR" install -y
      ocaml
      ocaml-native-compilers
      ocaml-findlib
      camlp4
      libpcre3-dev
      zlib1g-dev
      libgtk2.0-dev
      ninja-build
      awscli
      $JOB_DEPENDENCIES
  - wget https://raw.github.com/ocaml/opam/master/shell/opam_installer.sh -O - | sh -s /usr/local/bin system
  - export OPAMYES=1
  - opam install sedlex xml-light extlib rope ptmap
  # Install neko
  - if [ ! -d "$HOME/neko" ]; then
      mkdir $HOME/neko;
      pushd $HOME/neko;
      git clone https://github.com/HaxeFoundation/neko.git .;
    else
      pushd $HOME/neko;
      if [ ! -d "$HOME/neko/.git" ]; then
        git clone https://github.com/HaxeFoundation/neko.git .;
      else
        export OLD_REF=`git rev-parse HEAD`;
        git fetch --all; git reset --hard origin/master;
      fi;
      git submodule update --init --recursive;
    fi
  - export NEW_REF=`git rev-parse HEAD`
  - test $OLD_REF = $NEW_REF || cmake . -DSTATIC_DEPS=all -G Ninja || (git clean -dfx && export CACHE_AVAILABLE=0 && cmake . -DSTATIC_DEPS=all -G Ninja)
  # download static dependencies before actual build, with 3 chances to deal with network issues
  - test $OLD_REF = $NEW_REF || ninja download_static_deps || ninja download_static_deps || ninja download_static_deps
  - test $OLD_REF = $NEW_REF || (ninja -j 4)
  - sudo cmake -P cmake_install.cmake
  - popd
  # Setup database
  - travis_retry sudo apt-get install mysql-server-5.6 -y
  - mysql -u root -e "create user travis@localhost identified by '';"
  - mysql -u root -e "create database haxe_test;"
  - mysql -u root -e "grant all on haxe_test.* to travis@localhost;"
  # Setup JDK
  - jdk_switcher use oraclejdk7
  - java -version
  # Build haxe
  - if [ -d "$HOME/_hxbuild" ]; then
      echo "$HOME/_hxbuild exists";
      cp -pr ~/_hxbuild ./_build;
    fi
  - make package_src -s
  - opam config exec -- make -s STATICLINK=1
  - make package_bin -s
  - ls -l out
  - ldd -v ./haxe
  - ldd -v ./haxelib
  - export PATH="$PATH:$TRAVIS_BUILD_DIR"
  - export HAXE_STD_PATH="$TRAVIS_BUILD_DIR/std"
  - if [ ! -d "$HOME/_hxbuild" ]; then
        mkdir ~/_hxbuild;
    fi
  - cp -prf ./_build/* ~/_hxbuild/

install_osx: &install_osx
  - if [ ! -d "$HOME/neko" ]; then
      export CACHE_AVAILABLE=0;
    elif [ ! -d "$HOME/neko/.git" ]; then
      export CACHE_AVAILABLE=0;
    else
      export CACHE_AVAILABLE=1;
    fi
  # Install dependencies
  - travis_retry brew update --merge
  - brew uninstall --force brew-cask # https://github.com/caskroom/homebrew-cask/pull/15381
  - travis_retry brew install opam ninja zlib pcre mysql awscli;
  - brew outdated cmake || brew upgrade cmake # we need a recent cmake to use CMAKE_OSX_DEPLOYMENT_TARGET
  - export OPAMYES=1
  - opam init
  - opam install camlp4 sedlex ocamlfind xml-light extlib rope ptmap
  - eval `opam config env`
  # Install neko

  - if [ ! -d "$HOME/neko" ]; then
      mkdir $HOME/neko;
      pushd $HOME/neko;
      git clone https://github.com/HaxeFoundation/neko.git .;
    else
      pushd $HOME/neko;
      if [ ! -d "$HOME/neko/.git" ]; then
        git clone https://github.com/HaxeFoundation/neko.git .;
      else
        export OLD_REF=`git rev-parse HEAD`;
        git fetch --all; git reset --hard origin/master;
      fi;
      git submodule update --init --recursive;
    fi
  - export NEW_REF=`git rev-parse HEAD`
  - test $OLD_REF = $NEW_REF || cmake . -DSTATIC_DEPS=all -G Ninja || (git clean -dfx && export CACHE_AVAILABLE=0 && cmake . -DSTATIC_DEPS=all -G Ninja)
  # download static dependencies before actual build, with 3 chances to deal with network issues
  - test $OLD_REF = $NEW_REF || ninja download_static_deps || ninja download_static_deps || ninja download_static_deps
  - test $OLD_REF = $NEW_REF || (ninja -j 4)
  - sudo cmake -P cmake_install.cmake
  - popd
  # Setup database
  - mysql.server start
  - mysql -u root -e "create user if not exists travis@localhost identified by '';"
  - mysql -u root -e "create database haxe_test;"
  - mysql -u root -e "grant all on haxe_test.* to travis@localhost;"
  # Build haxe
  - if [ -d "$HOME/_hxbuild" ]; then
      echo "$HOME/_hxbuild exists";
      cp -pr ~/_hxbuild ./_build;
    fi
  - make package_src -s
  - make -s STATICLINK=1 "LIB_PARAMS=/usr/local/opt/zlib/lib/libz.a /usr/local/lib/libpcre.a"
  - make package_bin -s
  - ls -l out
  - otool -L ./haxe
  - otool -L ./haxelib
  - export PATH="$PATH:$TRAVIS_BUILD_DIR"
  - export HAXE_STD_PATH="$TRAVIS_BUILD_DIR/std"
  - if [ ! -d "$HOME/_hxbuild" ]; then
        mkdir ~/_hxbuild;
    fi
  - cp -prf ./_build/* ~/_hxbuild/

matrix:
  include:
    #########
    # linux #
    #########
    - os: linux
      env:
        - TEST=macro,neko,js,php,php7,flash9,as3,java,cs,python,hl,lua
        - DEPLOY_API_DOCS=1
        - DEPLOY_NIGHTLIES=1
        # - SAUCE=1
        # haxeci_decrypt (Deploy source package to ppa:haxe/snapshots.)
        - secure: "Mw3p6bDZuqVQ6u7GrwLQfje5hhIOA4+mdqqLXYHP79UKdhgqb91Dn6IbG9vQ1VXVe64W4YZbQAMBMMRX5kEPDl6JvTVGSBhg00Mi69oO5qrCMcBI6f9FntG72YaVvLf+PA7co+vKrnJzaP2M9pe4SH9Ztbhy0YNxULp7NQ8FLsM="
        # deploy_key_decrypt (Deploy doc to api.haxe.org.)
        - secure: "A75uYqU0Xz6plIgSewEs0QQWe472dCMb9kf3j7Hx0DS7dApXgx8++189sw9Sv0wam5KPtbcIM292MucjGCb5zocVj9xCUVgajhEA0QpTuDMBjk/cg3ClWCGjfybaCl2E5LLdUs7Zy4b4oNWtVikOWLWJ4sC1kaarR9p6kv8yYZg="
      # addons:
      #   <<: *addons
      #  sauce_connect: true
      before_install:
        - "export DISPLAY=:99.0"
        - "sh -e /etc/init.d/xvfb start"
        - "export AUDIODEV=null"
      install: *install_linux
    - os: linux
      env:
        - TEST=cpp
        - HXCPP_COMPILE_THREADS=4
        - HXCPP_COMPILE_CACHE=~/hxcache
      before_install:
        - export JOB_DEPENDENCIES="gcc-multilib g++-multilib"
      install: *install_linux

    #######
    # osx #
    #######
    - os: osx
      env:
        - TEST=macro,neko,js,php,python,hl,lua
        - DEPLOY_NIGHTLIES=1
      install: *install_osx

    - os: osx
      osx_image: xcode8.3
      env:
        - TEST=cpp
        - HXCPP_COMPILE_CACHE=~/hxcache
        - HXCPP_COMPILE_THREADS=4
      install: *install_osx

script:
  - eval `ssh-agent -s` # for deployment to haxe.org
  - export CAN_BUILD=`(test $CACHE_AVAILABLE = 1 || test $TRAVIS_OS_NAME = 'linux') && echo 1`
  - if [ ! $CAN_BUILD ]; then
      echo "No cache available, but initial cache created, please try restarting this job";
    fi
  - test $CAN_BUILD && pushd tests
  - test $CAN_BUILD && mkdir ~/haxelib && haxelib setup ~/haxelib
  - test $CAN_BUILD && haxelib install record-macros
  - test $CAN_BUILD && haxe -version
  - test $CAN_BUILD && haxe RunCi.hxml
  - test $CAN_BUILD && neko RunCi.n
  - test $CAN_BUILD && popd

branches:
  except:
    # A hack to prevent building for tags, assuming they all start with a number.
    # https://github.com/travis-ci/travis-ci/issues/1532
    - /^[0-9]/

notifications:
  webhooks:
    urls:
      - https://webhooks.gitter.im/e/95a5fa471c27beee8e7c
    on_success: change  # options: [always|never|change] default: always
    on_failure: always  # options: [always|never|change] default: always
    on_start: false     # default: false
